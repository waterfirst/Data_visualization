---
title: "R을 이용한 데이터 시각화/ 머신러닝 숙제 4"
author: "waterfirst"
date: 07/27/2024
date-format: long
format:
  html:
    toc: true
    embed-resources: true
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: '^(?:http:|https:)\/\/www\.quarto\.org\/custom'
editor: visual
code-fold: false
Rendering:
  embed-resources: true
execute:
  message : false
  warning : false
  error : false
  echo : true
lightbox: true
---

---

```{r}

```

## 1 시각화 따라 해 보기

아래 사이트 접속 후 Rstudio에서 그래프 하나씩 따라해보세요.

\[한국 R 사용자회 – 챗GPT 데이터 시각화 (r2bit.com)\] <https://r2bit.com/bitSlide/chatgpt_viz_202406.html#/데이터-시각화>
 

```{r}
library(tidyverse)
library(plotly)
library(gapminder)
library(crosstalk)
library(leaflet)
library(flipbookr)

head(gapminder)
```

### 1 ggplot으로 연도에 따른 기대 수명을 나라별로 그리기

```{r}
#| echo: false


gapminder %>% 
  ggplot(aes(x=year, 
             y=lifeExp, 
             group=country)) + 
  geom_line()

```



### 2 ggplot을 ggplotly에 넣어서 interactive 그래프 만들기

```{r}
#| echo: false

p <- gapminder %>% 
  ggplot(aes(x=year, 
             y=lifeExp, 
             group=country)) + 
  geom_line()

ggplotly(p)

```

 
### 3 interactive 그래프에 툴팁(tooltip : 마우스 올리면 글자 보이기) 넣기

```{r}
#| echo: false
#| 
p <- gapminder %>% 
  ggplot(aes(
    x = year, 
    y = lifeExp, 
    group = country, 
    text = paste0("대륙: ", continent, "\n",  
                  "국가: ", country))) + 
  geom_line()

ggplotly(p, tooltip = "text")

```


 
### 4 Highlight 기능 넣기 (검색박스 만들기)

```{r}
#| echo: false
#| 
gm_highlight <- highlight_key(gapminder, 
                              ~country)

life_g <- gm_highlight %>% 
  ggplot(aes(
    x=year, 
    y=lifeExp, 
    group=country, 
    text=paste0("대륙: ", continent, "\n",
                "국가: ", country))) + 
  geom_line()

life_gg <- ggplotly(life_g, tooltip = "text")
highlight(life_gg, on = "plotly_click", 
          selectize = TRUE, 
          dynamic = TRUE, 
          persistent = TRUE)


```



 
### 6 연결뷰 기능 (여러개 그래프 중 하나를 줌인 하면 다른 것도 줌인 되는 것)

- 더블 클릭하면 원래 크기로 돌아옴

```{r}
#| echo: false
#| 
gapminder_cjk <- gapminder %>% 
  filter(country %in% c("China", "Japan", 
                        "Korea, Rep."))

gapminder_sd <- SharedData$new(gapminder_cjk, 
                               ~country)

life_g <- gapminder_sd %>% 
  ggplot(aes(
    x = year, 
    y = lifeExp, 
    group = country,
    text = paste0("대륙: ", continent, "\n", 
                  "국가: ", country))) + 
  geom_line() +
  geom_point() +
  facet_wrap(~country)

ggplotly(life_g, tooltip = "text")

```

 
### 7 대륙별로 1인당 gdp (gdpPercap) 과 기대수명(lifeExp) 를 연도별로 그래프 그리기
(ggplotly 사용)

```{r}
#| echo: false
#| 
life_g <- gapminder %>% 
  ggplot(aes(
    x = gdpPercap, 
    y = lifeExp, 
    group = country, color=country,
    text=paste0("대륙: ", continent, "\n", 
                "국가: ", country))) + 
  geom_point(alpha = 0.2) +
  geom_point() +
  facet_wrap(~continent, ncol = 2) +
  scale_x_sqrt() +
  theme(legend.position = "none")

ggplotly(life_g, tooltip="text")

```


### 8 대륙별로 1인당 gdp (gdpPercap) 과 기대수명(lifeExp) 를 연도별로 그래프 그리기(애니메이션)
(geom_point(aes(frame = year) 사용하기)

```{r}
#| echo: false
#| 
life_g <- gapminder %>% 
  ggplot(aes(
    x = gdpPercap, 
    y = lifeExp, 
    group = country, color=country,
    text=paste0("대륙: ", continent, "\n", 
                "국가: ", country))) + 
  geom_point(alpha = 0.2) +
  geom_point(aes(frame = year), color="red") +
  facet_wrap(~continent, ncol = 2) +
  scale_x_sqrt() +
  theme(legend.position = "none")

ggplotly(life_g, tooltip="text")

```


### 9 그래프 따라하기(1)

  theme(legend.position = "top", 
        axis.text.x = element_text(angle = 90, hjust = 1)) 사용하기

```{r}
#| echo: false
#| 
gapminder %>% filter( country %in% c("Korea, Rep.","Korea, Dem. Rep.", "China", "United States", "Japan")) %>% 
  ggplot(aes(x=year, y=lifeExp, group = country, col=country))+
  geom_line() +  
  geom_point(size=1.5) +
  theme_bw()+
  labs(x="", y="기대수명", color="") +
  theme(legend.position = "top", 
        axis.text.x = element_text(angle = 90, hjust = 1))
```

### 10 그래프 따라하기(2)

facet_wrap(~country, scale="free") 사용하기

```{r}
#| echo: false
gapminder %>% filter( country %in% c("Korea, Rep.","Korea, Dem. Rep.", "China", "United States", "Japan")) %>% 
  ggplot(aes(x=year, y=lifeExp, group = country, col=country))+
  geom_line() +  geom_point(size=1.5) +
  theme_bw()+
  
  labs(x="", y="기대수명", color="") +
  theme(legend.position = "top", 
        axis.text.x = element_text(angle = 90, hjust = 1))+
  facet_wrap(~country, scale="free")

```

### 12 애니메이션 구현하기

따라서 작성해보기  

gif 파일로 저장하기

```{r}

library(gganimate)

life <- gapminder %>% filter( country %in% c("Korea, Rep.","Korea, Dem. Rep.", "China", "United States", "Japan")) %>% 
  ggplot(aes(x=year, y=lifeExp, group = country, col=country))+
  geom_line(alpha=0.3, linewidth=1.5) +  
  geom_point(aes(frame = `year`), size=3.5) +
  # scale_x_date(date_breaks="1 week", date_labels="%m-%d") +
  # scale_y_continuous(labels=scales::percent) +
  theme_bw(base_family="NanumGothic") +
  
  labs(x="", y="기대수명", color="") +
  theme(legend.position = "top", 
        axis.text.x = element_text(angle = 90, hjust = 1),
        axis.text=element_text(size=16, color="black"), 
        legend.text=element_text(size=18), 
        plot.title = element_text(size=22)) 

gganimate(life)
gganimate(life, "기대수명.gif", ani.width = 640, ani.height = 480)

```



### 13 인터랙티브 그래프 

- 펭귄 종별 몸무게
- 펭귄 지느러미 길이와 몸무게 



```{r}
#| echo: false
#| 
library(tidyverse); library(palmerpenguins); library(ggiraph); library(patchwork)

color_palette <- thematic::okabe_ito(3)

scatter_gg <- penguins |> drop_na() |>
  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species, data_id = species)) +
  geom_point_interactive(size = 1) +
  labs(title = "펭귄의 지느러미 길이와 몸무게",
       x = "지느러미 길이 (mm)", y = "몸무게 (g)", color = "종") +
  theme_minimal(base_size = 5) +
  theme(legend.position = "top") +
  scale_color_manual(values = color_palette) +
  scale_y_continuous(labels = scales::comma) 

boxplot_gg <- penguins |> drop_na() |> 
  ggplot(aes(x = species, y = body_mass_g, fill = species,  data_id = species)) +
  geom_boxplot_interactive() +  
  geom_jitter_interactive(aes(col = species)) +
  labs(title = "펭귄 종별 몸무게",
       x = "펭귄 종명", y = "몸무게 (g)", color = "종") +
  theme_minimal(base_size = 12) +
  theme(legend.position = "none") +
  scale_fill_manual(values = color_palette) +
  scale_color_manual(values = color_palette) +
  scale_y_continuous(labels = scales::comma) +
  coord_flip()

girafe(
  ggobj = boxplot_gg + plot_spacer() + scatter_gg + plot_layout(widths = c(0.45, 0.1, 0.45)),
  options = list(
    opts_hover(css = ''), opts_hover_inv(css = "opacity:0.1;"), 
    opts_sizing(rescale = FALSE)
  ))
```

### 14 ggiraph 패키지 연습해보기


library(ggiraph)

```{r}


dat <- gapminder::gapminder |> 
  janitor::clean_names() |> 
  mutate(
    # Reformat continent as a character instead of as a factor
    # (will be important later)
    id = levels(continent)[as.numeric(continent)],
    continent = forcats::fct_reorder(continent, life_exp)
  )

color_palette <- thematic::okabe_ito(5)
names(color_palette) <- unique(dat$continent)
base_size <- 18
mean_life_exps <- dat |> 
  group_by(continent, year, id) |> 
  summarise(mean_life_exp = mean(life_exp)) |> 
  ungroup()

line_chart <- mean_life_exps |> 
  ggplot(aes(x = year, y = mean_life_exp, col = continent)) +
  geom_line(linewidth = 2.5) +
  geom_point(size = 4) +
  theme_minimal(base_size = base_size) +
  labs(
    x = element_blank(),
    y = 'Life expectancy (in years)',
    title = 'Life expectancy over time'
  ) +
  theme(
    text = element_text(
      color = 'grey20'
    ),
    legend.position = 'none',
    panel.grid.minor = element_blank(),
    plot.title.position = 'plot'
  ) +
  scale_color_manual(values = color_palette)
line_chart
```


```{r}

library(ggiraph)

line_chart <- mean_life_exps |> 
  ggplot(aes(x = year, y = mean_life_exp, col = continent, data_id = id)) +
  geom_line_interactive(linewidth = 2.5) +
  geom_point_interactive(size = 4) +
  theme_minimal(base_size = base_size) +
  labs(
    x = element_blank(),
    y = 'Life expectancy (in years)',
    title = 'Life expectancy over time'
  ) +
  theme(
    text = element_text(
      color = 'grey20'
    ),
    legend.position = 'none',
    panel.grid.minor = element_blank(),
    plot.title.position = 'plot'
  ) +
  scale_color_manual(values = color_palette)

girafe(ggobj = line_chart)
girafe(
  ggobj = line_chart,
  options = list(
    opts_hover(css = ''), ## CSS code of line we're hovering over
    opts_hover_inv(css = "opacity:0.1;"), ## CSS code of all other lines
    opts_sizing(rescale = FALSE) ## Fixes sizes to dimensions below
  ),
  height_svg = 6,
  width_svg = 9
)
```

---

## 2 머신러닝 (회귀분석)

아래 kaggle 에서 중고차 가격 데이터를 다운로드 받아서 중고차 가격 예측하기 

```{r}
#라이브러리 불러오기
library(dplyr)
library(caret)
library(ModelMetrics)
library(rpart)
library(randomForest)


```

```{r}
#데이터 불러오기
X_test <- read.csv("https://raw.githubusercontent.com/waterfirst/Data_visualization/main/data/used_car/X_test.csv", stringsAsFactors=T)
X_train <- read.csv("https://raw.githubusercontent.com/waterfirst/Data_visualization/main/data/used_car/X_train.csv", stringsAsFactors=T)
y_train <- read.csv("https://raw.githubusercontent.com/waterfirst/Data_visualization/main/data/used_car/y_train.csv", stringsAsFactors=T)
y_test <- read.csv("https://raw.githubusercontent.com/waterfirst/Data_visualization/main/data/used_car/y_train.csv", stringsAsFactors=T)

train<-inner_join(y_train, X_train)
head(train)
str(train)
str(X_test)
```

- 중고차 가격을 3개의 머신러닝 모델을 이용하여 예측해보고, 가장 좋은 모델로 y_test 를 예측해서 csv 파일로 저장하라. 

### 데이터 전처리, 불필요한 컬럼 제거, Na 처리, target y 확인
```{r}
#| echo: false
train<- train[,-c(1,4)]
test<-X_test[,-c(1,3)]

colSums(is.na(train))
colSums(is.na(test))
```


### 훈련/검증 데이터 나누기
```{r}
#| echo: false
idx<-createDataPartition(train$price, p=0.7, list=F)
train_df<-train[idx,]
test_df<-train[-idx,]

head(train_df)
head(test_df)
```


### 모델 만들기 (rpart, glm, randomForest)

```{r}
#| echo: false
m1<-train(price~., data=train_df, method="rpart")
m2<-train(price~., data=train_df, method="glm")
m3<-randomForest(price~., data=train_df, ntree=10)

m1
m2
m3
```

### 예측하기

```{r}
#| echo: false
p1<-predict(m1, test_df)
p2<-predict(m2, test_df)
p3<-predict(m3, test_df[,-1])

```

### 모델 성능 검증 (R2)
```{r}
#| echo: false
#R2 score
cat("의사결정나무 모델 R2 = ", caret::R2(test_df$price, p1), "  ") #의사결정나무

cat("로지스틱 회귀분석 모델 R2 = ", caret::R2(test_df$price, p2), "  ") #로지스틱 회귀분석

cat("랜덤포레스트 R2 = ", caret::R2(test_df$price, p3), "  ")  #랜덤포레스트
```


### 최종 모델로 모델링하고 예측하기
```{r}
#| echo: false
#최종모델로 모델링, 예측하기

m<-randomForest(price~., data=train, ntree=100)
p<-predict(m, test)

m

```


### 데이터 제출하기
```{r}
#| echo: false
#데이터 제출하기

p<-as.character(p)
write.csv(p, "1234.csv", row.names=F)
abc<-read.csv("1234.csv")
head(abc)
```


