---
title: "R을 이용한 데이터 전처리와 시각화 기초 코스"
author: "waterfirst"
format:
  html:
    toc: true
    embed-resources: true
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: '^(?:http:|https:)\/\/www\.quarto\.org\/custom'
editor: visual
code-fold: true
Rendering:
  embed-resources: true
execute:
  message : false
  warning : false
  error : false
  echo : true
lightbox: true
---

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1200px-R_logo.svg.png)

## 1 Introduction

이 수업은 코딩을 전혀 모르는 사람들을 대상으로 숫자로 된 데이터를 적절히 칼질하여 요리할 수 있도록 하는 것을 목적으로 만들었습니다.

반복적으로 정형화된 데이터를 처리하고 그래프를 그리는 연구원들은 최종적으로는 자신의 결과물을 알기 쉽게 표현하는 것입니다.

이를 위해 tidyverse 패키지 하나만으로 얼마나 쉽게 데이터를 다룰 수 있는지 R의 장점이 무엇인지 알 수 있는 시간이 될 것입니다.

**R 언어 간단 소개**

두명의 뉴질랜드 통계학자가 만듦 : 로버트 젠틀맨(Robert Gentleman)과 로스 이하카(Ross Ihaka)

해들리 위컴에 의해 빅데이터 툴로 발전함 (대표적 : ggplot, tidyverse) <br/>

![](https://149357281.v2.pressablecdn.com/wp-content/uploads/2017/09/9.28-1.png)

**언어의 특징**

1부터 시작 (다른 언어들은 0부터 시작)

**패키지 설치, 불러오기**

-   install.packages(“패키지이름”)

-   library(패키지이름)

### 프로그램 구분

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHzmVo%2FbtqYo0P6SWZ%2FtDiMUtNpC8VETbYmmx7nW1%2Fimg.png)

Back end를 담당하는 데이터 전처리 및 시각화는 tidyverse 패키지를 이용하여 진행하고 필요할 경우, 추가 패키지를 이용할 것입니다.

실전에서 바로 쓸 수 있도록 기본 예제 데이터를 이용하여 학습하고 각자 자신의 자주 사용하는 데이터를 이용하여 반복 적으로 하던 일을 코딩을 통해 줄이고 더 창의적인 일에 시간을 쓸 수 있도록 4주 과정으로 만들었습니다. (주1회 2 \~3시간)

<br/>

## 2 강의순서

1.  R 설치, 기본문법 (1주차)

    <https://dplyr.tidyverse.org/articles/dplyr.html>

2.  데이터 전처리 문제 풀이 (2주차)

    <https://m-clark.github.io/data-processing-and-visualization/intro.html>

3.  데이터 전처리 및 시각화 (3주차)

    <https://r-graph-gallery.com/>

4.  다양한 데이터 시각화 연습 (4주차)

    2d, 3d 이미지화

    -   ![](images/logo1.png)

    -   html로 문서 만들기

        <https://waterfirst.github.io/LENS_EXPERIMENT/>

------------------------------------------------------------------------

## 3 강의전 사전 준비(프로그램 설치)

(#1\~3까지 하고, #4\~7은 나중에\~\~)

1.  R 설치 : <https://posit.co/download/rstudio-desktop/>

2.  RStudio 설치 <https://posit.co/download/rstudio-desktop/>

3.  Quarto CLI설치 : <https://quarto.org/docs/download/>

4.  Latex 설치 : (Rstudio 터미널창) **\$ quarto install tinytex**

5.  출판용 사이트 가입 : <https://quartopub.com/>

6.  github 가입 : <https://github.com/>

7.  git 설치 : <https://git-scm.com/download/win>

\[Quarto \]<https://quarto.org/docs/presentations/revealjs/>

프로그램을 배울 때, 다운로드, 설치, 환경설정만 하면 50%는 이미 배운것입니다. \^\^

### RStudio 설명

![](./images/rstudio_window.png)

------------------------------------------------------------------------

## 4 Day1

-   데이터 분석과 시각화를 하는데 R이 최선인가?

ex) 상용 프로그램 : 엑셀 , 미니탭, 오리진, 매트랩, 스팟파이어

오픈소스 : 파이썬, R

-   왜 데이터 분석 및 시각화가 필요한가? GPT 시대인데...

-   내가 하고 있는 분야에 데이터는 정형화된 데이터인가?(숫자) 아니면 비정형 데이터인가(문자)

-   데이터 분석의 최종 목적은 무엇인가?

------------------------------------------------------------------------

### 4-1. R Basic

[1. 데이터 형식]{style="color:red;"}

```         
숫자형(numeric) : num(숫자형), int(정수형), dbl(실수형)
문자형(character) : chr
범주형(factor) : fct
논리형(logical) : logi
결측 (Not Available) : NA
무한대 (Infinite) : Inf
데이터 형식 알아보기 : class(변수명) is.numeric(변수명), is.character(변수명), is.factor(변수명)
데이터 형식 바꾸기 : as.numeric(변수명), as.factor(변수명), as.character(변수명), as.logical(변수명)
```

::: callout-note
범주형 변수(factor) : 그래프를 그리거나 통계적 분석시 유용함

데이터를 `열별`로 모아 놓은 `dataframe`, `tibble` 이 실제 분석에 이용

`list`, `matrix`, `array` 형태도 있음

a \<- c(1,2,3,4) : 숫자형 벡터 a \<- c("1", "2", "a", "b") : 문자형 벡터
:::

::: callout-tip
#### 단축키

`<-` : Alt + -

`실행` : Ctrl + enter

`|>` : Ctrl + Shift + M

`주석처리` : Ctrl + Shift + C

`콘솔창 지우기` : Ctrl + L
:::

<br/>

[2. 자주 사용 하는 함수]{style="color:red;"}

```         
평균(mean) : mean(변수)
중위수(median) : median(변수)
최대값(max) : max(변수)
최소값(min) : min(변수)
합(sum) : sum(변수)
표준편차(sd) : sd(변수)
분산(var) : var(변수)
절대값(abs) : abs(변수)
반올림(round) : round(변수, 반올림할 소수점 아래수)
제곱근(sqrt) : sqrt(변수)
원소갯수, 문자열길이(length) : length(변수)
행, 열의 수(dim) : dim(df)
프린트(print) : print(변수) / print(“문자”)
조건(ifelse) : ifelse(x>10, “a”, “b”)
중복없이 관측치 종류(unique) : unique(변수)
문자패턴 찾기(grep, grepl) : grep(“문자”, df):열번호 출력, grepl(“문자”, df):true/false로 출력
문자패턴 찾아 바꾸기(gsub) : gsub(“이전문자”, “새로운 문자”, df)
열갯수(ncol) : ncol(df)
행갯수(nrow) : nrow(df)
열이름(colnames) : colnames(df)
행이름(colnames) : rownames(df)
빈도수 구하기(table) : table(변수)
정렬하기(sort) : 내림차순 sort(변수), 오름차순 sort(변수, decreasing = TRUE)
열이름(names, colnames) : names(변수)
최대, 최소위치 찾기(which.max, which.min) : which.max(변수), which.min(변수)
```

::: callout-tip
### 4-2. 데이터 탐색 기본 함수

`head` : 앞 6개 행 보기

`tail` : 뒤 6개 행 보기

`summary` : 기술 통계 간단히 보기

`str` : 데이터 형식 보기
:::

<br/>

[3. 연산 기호]{style="color:red;"}

```         
"
* (곱하기) : x*2
/ (나누기) : x/2
%/% (나눗셈의 몫) : 16%/%3 = 5
%% (나눗셈의 나머지) : 16%/%3 = 1
== (일치, True or False) : 3==5, False
!= (불일치) : 3!=5, True
& (and) : x > 2 & x < 10
| (or) : x < 2 | x > 10
"
```

<br/>

### 4-3. Tidyverse

\[참고 자료\]<https://rstudio.github.io/cheatsheets/html/data-transformation.html>

```         
%>% (파이프라인, 왼쪽 데이터프레임을 오른쪽 함수에 넣어라) : df %>% head()

filter (조건에 맞는 행 추출) : df %>% filter(컬럼명 == “a”)

select(특정열 선택) : df %>% select(열번호) / df[, 열번호]

slice(특정행 선택) : df %>% slice(행번호) / df[행번호, ]
mutate(특정열 추가) : df %>% mutate(새로운 열이름 = )
rename(열이름 바꾸기) : df %>% rename(새로운 열이름 = 이전 열이름)
arrange(정렬하기) : 오름차순 : df %>% arrange(열이름), 내림차순 : df %>% arrange(desc(열이름))

group_by(특정열 그룹화), summarise(통계치 계산) :

df %>% group_by(열이름) %>% summarise(평균=mean(열이름))
열합치기(inner_join, full_join, left_join, right_join) : inner_join(df1, df2, by=“name”)

separate(특정기호로 분리) : df %>% separate(열이름, into = c("a", "b"), sep = "_")

na가 있는 행 제거하기(na.omit) : na.omit(df)

na가 있는 열에서 na 는 제거하고 계산하기 (na.rm=T) : mean(df, na.rm=T)

열합치기(cbind, bind_cols) : cbind(df1, df2) or bind_cols(df1, df2)
행합치기(rbind, bind_rows) : rbind(df1, df2) or bind_rows(df1, df2)

중복없는 값 찾기(distinct) : df %>% distinct ("열이름")

행의 수 세기 : n(), count()
```

### 4-4. long_form, wide_form

![](https://www.statology.org/wp-content/uploads/2021/12/wideLong1-1.png)

iris data를 이용하여 꽃잎 길이, 넓이, 꽃받임 길이, 넓이를 long form으로 바꾸어보자.

```{r}
library(tidyverse)
head(iris)

iris |> pivot_longer(cols = Sepal.Length:Petal.Width, names_to = "measure", values_to = "value") |> head()

iris |> pivot_longer(cols = Sepal.Length:Petal.Width, 
                     names_to = c("name1", "name2"),
                     names_sep ='\\.') |> head()

iris_long <- 
  iris |> pivot_longer(cols = Sepal.Length:Petal.Width, names_to = "measure", values_to = "value")


iris_long |> pivot_wider(
    names_from = measure,  values_from = value) |> unnest() |> head()
```

<br/>

### 4-4. 연습문제

![](images/penguin.png)

-   palmer penguin을 df에 넣고 앞 6개 행을 살펴보라.

    ```{r}
    #install.packages("palmerpenguins")
    library(palmerpenguins)
    df <-  penguins
    head(df)
    ```

-   데이터 탐색을 하라 (EDA : str, summary 이용)

    ```{r}
    str(df)
    summary(df)
    ```

-   NA가 있는 열 확인하라

    ```{r}
    colSums(is.na(df))
    ```

-   컬럼명에서 \_mm 제거하고 6개 행 보기(rename 이용 )

    ```{r}
    library(tidyverse)
    df |> rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      head()
      
    ```

-   Adelie 펭귄의 부리 길이 평균은 얼마일까?

    ```{r}
    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      filter(species =="Adelie")  |> 
      summarise("부리길이" = mean(bill_length, na.rm=T))
    ```

-   각 펭귄의 부리 길이, 부리 높이의 평균 구하라(소수 첫째자리까지 구하라)

    ```{r}
    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      group_by(species) %>% summarise("부리길이"=round(mean(bill_length, na.rm=T),1), "부리높이"=round(mean(bill_depth, na.rm=T),1))
    ```

-   펭귄 종류별 몇마리인가

    ```{r}
    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      group_by(species) %>%
      summarise(n=n())
    ```

-   펭귄종류, 부리길이, 부리높이 열만 선택해서 보여줘라 (6개 행)

    ```{r}
    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      select(species, bill_length, bill_depth) %>% head()
    ```

-   10행에서 15행을 보여주라.

    ```{r}
    df %>% slice(10:15)
    ```

-   새로운 변수를 만들어라 (bill_ratio = bill_lenght/bill_depth) : mutate

    ```{r}
    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      mutate(bill_ratio=bill_length/bill_depth) |> 
      head()
    ```

-   위 문제에서 NA 가 있는 행은 제거하고 보여줘라

    ```{r}
    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      mutate(bill_ratio=bill_length/bill_depth) |> 
      na.omit() %>% head()
    ```

-   Adelie, Chinstrap 펭귄의 각각 body_mass가 가장 작은 10개의 평균 부리길이(bill_length)를 구해서 두 평균 차이를 계산하라

    ```{r}
    avg1 <- df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      filter(species=="Adelie") |> 
      arrange(body_mass_g) |> 
      slice(1:10) |> 
      summarise(bl=mean(bill_length))
    avg2 <- df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      filter(species=="Chinstrap") |> 
      arrange(body_mass_g) |> 
      slice(1:10) |> 
      summarise(bl=mean(bill_length))

    result<- abs(avg1$bl-avg2$bl)
    print(result)
    ```

-   부리 길이(bill_length) 중 최빈값(가장 많은 수)을 찾아라.

    ```{r}

    df |> 
       rename(bill_length = bill_length_mm,
                 bill_depth = bill_depth_mm,
                 flipper_length = flipper_length_mm) |>
      select(bill_length) |> 
      table()  -> y

    names(y)[which(y==max(y))] 

    ```

### 4-5. 숙제

::: callout-note
Data : gapminder 연도별, 나라별 기대수명, 인구수, 1인당 GDP

`library(gapminder)` 로 데이터 불러오기
:::

![](images/gapminder.png)

::: callout-tip
## 문제

1.  2007년 대륙별 나라수는 몇 나라인가?

2.  가장 최근 연도에서 인구수가 많은 상위 10개 나라를 뽑아서 나라별 인구수와 기대 수명을 구하라. (이때 인구수는 13.2억명, 기대수명은 73세로 단위를 맞추어라. ) )

3.  연도별 기대수명이 가장 빠르게 증가한 나라 10개를 순서대로 나열하시오. (1952년, 2007년 비교)

4.  2002년도 대륙별 1인당 gpd의 평균과 표준편차는 어떻게 되는가?

5.  기대수명 데이터를 표준화(평균 0, 표준편차 1) 하라.

6.  Kuwait 를 제외하고, 1인당 gpd 데이터를 정규화(1과 0 사이로 만듦) 하라
:::

::: callout-warning
## Hint

`정규화 함수` nor_minmax = function(x){ result = (x - min(x)) / (max(x) - min(x)) return(result) }

`표준화 함수` nor_sd = function(x){ result = (x - mean(x)) / sd(x) return(result) }
:::

![](images/nor_scale.png)

::: {.callout-caution collapse="true"}
## 정답(R code)

1.  gapminder \|\> filter(year == 2007) \|\> group_by(continent) \|\> summarise(n= n())
2.  gapminder \|\> filter(year == 2007) \|\> arrange(-pop) \|\> slice(1:10) \|\> group_by(country) \|\> summarise(인구수_억명 = round(pop/100000000,1), 기대수명_세 = round(lifeExp) ) \|\> arrange(-인구수_억명)
3.  gapminder \|\> select(country, year, lifeExp) \|\> filter(year %in% c(1952, 2007)) \|\> pivot_wider(names_from = year, values_from = lifeExp) \|\> mutate(ratio = (`2007`- `1952`)/(2007-1952)) \|\> arrange(-ratio)
4.  gapminder \|\> filter(year == 2002) \|\> group_by(continent) \|\> summarise(avg = mean(gdpPercap, na.rm=T), `σ`= sd(gdpPercap, na.rm=T))
5.  nor_sd = function(x){ result = (x - mean(x)) / sd(x) return(result) }

gapminder \|\> mutate(life_nor = nor_sd(lifeExp) )

6.  nor_minmax = function(x){ result = (x - min(x)) / (max(x) - min(x)) return(result) }

gapminder \|\>

filter(country != "Kuwait") \|\> mutate(gdp_sd = nor_minmax(gdpPercap) )
:::

------------------------------------------------------------------------

## Day2 (Homework)

아래는 데이터 전처리 예제입니다. 문제와 답만 있습니다. 한주 동안 풀어보시고 다음 강의 (7/13 토)에 각자 나누어서 어떻게 풀었는지 설명하는 시간을 갖도록 하겠습니다.

### 1 airquality

*airquality* 데이터 셋

5월부터 9월까지 Ozone(오존), Solar(uv), Wind(풍속), Temp(온도)에 관한 데이터세트이다.

```{r}
library(tidyverse)
head(airquality)

```

#### 1. 열별 결측치가 몇개가 있는지 표시하라.

```{r}


colSums(is.na(airquality))

```

#### 2. 월별 Ozone의 평균과 Wind의 표준편차를 구하시오.

```{r}


airquality |> group_by(Month) |> summarise(Ozone_평균 = mean(Ozone, na.rm=T),  Wind_표준편차 = sd(Wind, na.rm=T))

```

#### 3. 온도는 화씨로 되어 있는데, 섭씨 온도 Temp_C 를 새로운 열로 만들어라. 이때 소수 둘째자리에서 반올림해서 첫째자리까지 보이고 섭씨온도가 가장 높은 날은 몇월 몇일, 몇도인지 표시하라.

**섭씨 = (화씨 − 32) × 5/9**

```{r}


airquality |> 
  mutate(Temp_C = round((Temp-32)*5/9,1)) |> 
  arrange(-Temp_C) |> 
  slice(1) |> 
  select(Month, Day, Temp_C)


airquality |> 
  filter(Temp == max(Temp)) |>
  mutate(Temp_C = round((Temp-32)*5/9,1)) |> 
  select(Month, Day, Temp_C)
```

#### 4. Solar.R이 150 이상인 날 중에 8월\~9월 총 몇일이나 되는가

```{r}


airquality |> 
  filter(Solar.R >= 150) |> 
  filter(Month %in% c(8, 9)) |> 
  count()

```

#### 5. Ozone이 결측치가 있는 날 중에 월별 Wind의 세기의 중간값을 구하시오.

```{r}


airquality |> 
  filter(is.na(Ozone)) |> 
  group_by(Month) |> summarise(Wind_중간값= median(Wind, na.rm=T))
```

------------------------------------------------------------------------

### 2 diamonds

*diamonds* 데이터 셋

![](https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F3824396%2Ff6235a3402992f0fc94af9e0ca3465c2%2Finbox_3824396_4554b5824665256889dafdd5c4c59890_Bbf0GWk.jpg?generation=1588773703548655&alt=media)

가격: 미국 달러 가격.

캐럿: 다이아몬드의 무게.

절단: 절단 품질(최악의 순서).

색: 다이아몬드의 색상(가장 나쁜 순서).

선명도: 다이아몬드의 선명도(최악의 순서).

x: 길이(mm).

y: 너비(mm).

z: 깊이(mm). 깊이:

총 깊이 백분율: 100 \* z / 평균(x, y)

테이블: 가장 넓은 지점을 기준으로 다이아몬드 상단의 너비입니다.

```{r}

head(diamonds)

```

#### 1. 열별 영어로 된 이름을 한글로 바꾸어라.

```         
     캐럿 = carat,
     절단 = cut,
     색 = color,
     선명도 =clarity,
     깊이 = depth,
     상단너비 = table,
     가격 = price
```

```{r}


diamonds |> 
  rename(캐럿 = carat,
         절단 = cut,
         색 = color,
         선명도 =clarity,
         깊이 = depth,
         상단너비 = table,
         가격 = price)

```

#### 2. 가격이 평균보다 작은 다이아몬드를 clarity별로 몇개씩 있는지 구하라.

```{r}


diamonds |> 
  filter(price < mean(price) ) |> 
  group_by(clarity) |> 
  summarise(n=n())

```

#### 3. 깊이백분율 열을 아래 수식에 맞도록 새로 만든 후 head()를 쓴 후 , depth와 깊이백분율 열만 보이도록 하라. 이때 깊이백분율은 소수 첫째자리까지만 보이라.

\*\*깊이백분율 = z / (x와 y의 평균) \*100 \*\*

```{r}


diamonds |> 
  mutate(깊이백분율 = round(z / ((x+y)/2)*100,1)) |> 

  head() |> 
  select(깊이백분율, depth)

```

#### 4. color별로 carat의 평균과 price의 중간값을 보여라. carat은 소수 둘째자리까지만 보이고, price의 내림차순으로 정렬하라.

```{r}


diamonds |> 
  group_by(color) |> 
  summarise(carat평균 = round(mean(carat),2),
            price중간값 = median(price)) |> 
  arrange(-price중간값)

```

#### 5. cut이 Premium 인 것중에서 carat이 가장 큰 값을 가지는 diamond의 가격은 얼마인가?

```{r}


diamonds |>
  filter(cut == "Premium") |> 
  filter(carat == max(carat)) |> 
  select(price) |> 
  distinct(price)

```

------------------------------------------------------------------------

### 3 Titanic

*Titanic* 데이터 셋

![](https://miro.medium.com/v2/resize:fit:800/1*7ae00Bjo8x3qx1YZGEIdWw.jpeg)

```         
PassengerId: 각 승객에게 주어진 고유 ID 번호
Survived: 승객이 생존(1)했는지 사망(0)했는지 여부
Pclass: 승객 등급
Name: 이름
Sex: 승객의 성별
Age: 승객의 나이
SibSp: 형제자매/배우자의 수
Parch: 부모/자녀의 수
Ticket: 티켓 번호
Fare: 티켓에 대해 지불한 금액
Cabin: 객실 카테고리
Embarked: 승객이 탑승한 항구(C = Cherbourg, Q = Queenstown, S = Southampton)
```

r에서는 타이타닉 데이터를 좀더 간편하게 만든 내장데이터가 있다. data를 아래와 같이 불러와서 titanic 변수에 넣고 시작하자.

titanic \<- as.data.frame(Titanic)

```{r}
titanic <- as.data.frame(Titanic)
head(titanic)

```

#### 1. 탑승자 중 여자 아이의 총 수는 몇명인가?

```{r}


titanic |> 
  filter(Sex == "Female" & Age == "Child") |> 
  summarise(n = sum(Freq))

```

#### 2. Crew중 여자 어른의 수는 몇명인가?

```{r}


titanic |> 
  filter(Sex == "Female" & Class == "Crew") |> 
  summarise(n = sum(Freq))

```

#### 3.Sex별, Age별 생존자가 몇명인지 보이시오.

```{r}


titanic |> 
  filter(Survived == "Yes") |> 
  group_by(Sex, Age ) |> 
  summarise(생존자 = sum(Freq))

```

#### 4. 위 문제에서 Sex별, Age별 생존자의 비율은 얼마인가?

```{r}


titanic |> 
  group_by(Sex, Age ) |> 
  summarise(인원수 = sum(Freq)) -> titanic1

titanic |> 
  filter(Survived == "Yes") |> 
  group_by(Sex, Age ) |> 
  summarise(생존자 = sum(Freq)) -> titanic2

left_join(titanic1, titanic2) |> 
  mutate(생존율 = round(생존자 / 인원수 * 100))

```

#### 5. Class별 생존율을 구하시오.

```{r}


titanic |> 
  group_by(Class) |> 
  summarise(인원수 = sum(Freq)) -> titanic3

titanic |> 
  filter(Survived == "Yes") |> 
  group_by(Class ) |> 
  summarise(생존자 = sum(Freq)) -> titanic4

left_join(titanic3, titanic4) |> 
  mutate(생존율 = round(생존자 / 인원수 * 100))

```

------------------------------------------------------------------------

<hr/>

<hr/>

### 4 [날짜 다루기]{style="color:blue;"}

To learn more about **lubridate** see <https://lubridate.tidyverse.org/>.

-   패키지 설치, 불러오기

```{r}
#| echo = T

#install.packages('lubridate')
library('lubridate')
```

-   문자로 표현된 날짜를 날짜변수로 바꾸기

```{r}
#| echo = T

date <- '2020-01-10'
class(date)
date2 <- as.Date(date)
class(date2)

```

-   연, 월, 일 뽑아내기

```{r}
#| echo = T

year(date)
month(date)
day(date)
ymd(date)

```

-   주, 요일 뽑아내기

```{r}
#| echo = T
week(date)
wday(date)
wday(date, label = T)

```

-   시간, 분, 초 뽑아내기

```{r}
#| echo = T
now()
time <- now()
hour(time)
minute(time)
second(time)
ymd_hms(time)
```

------------------------------------------------------------------------

## 

### 5 [강수량 분석]{style="color:blue;"}

*\[출처\] 1주차 예상문제 (실기1 유형) (이기적 스터디 카페)*

dataurl = https://raw.githubusercontent.com/Datamanim/datarepo/main/weather/weather2.csv

-   패키지로드, 데이터 불러오기

```{r}
#| echo = T
library(tidyverse)

df<-read.csv("https://raw.githubusercontent.com/Datamanim/datarepo/main/weather/weather2.csv")

```

------------------------------------------------------------------------

-   [Q1. 여름철(6월,7월,8월) 이화동이 수영동보다 높은 기온을 가진 시간대는 몇개인가?]{style="color:red;"}

```{r}

#Q1

library(lubridate)

df |> 
  mutate(월 = month(time),
         시간 = hour(time)) |> 
  filter(월 %in% c(6,7,8),
         이화동기온 > 수영동기온) |> 
  nrow()

```

-   [Q2. 이화동과 수영동의 최대강수량의 시간대를 각각 구하여라]{style="color:red;"}

```{r}

#Q2

df |> 
  filter(이화동강수 == max(이화동강수 ) ) |> 
  select(time)

df |> 
  filter(수영동강수 == max(수영동강수)) |> 
  select(time)

```

------------------------------------------------------------------------

## 데이터불러오기

To learn more about **tidyr** see <https://tidyr.tidyverse.org/reference/pivot_longer.html/>.

데이터 분석의 첫 걸음은 데이터를 불러오는 과정이다.

1.  R의 내장 데이터에서 불러오기

    data() , help("AirPassengers")

<https://vincentarelbundock.github.io/Rdatasets/datasets.html>

```{r}

data(AirPassengers)
AirPassengers

plot(AirPassengers, main = "Airline Passengers Over Time",
     xlab = "Year-Month", ylab = "Number of Passengers")

```

2.  외장데이터 불러오기 (package 설치, library로 불러오기)

    gapminder : 세계 여러 국가의 인구, 경제, 건강 등의 데이터를 포함

```{r}

#install.packages("gapminder")
library(gapminder)

data(gapminder)
head(gapminder)
```

3.  클릭보드(엑셀)에서 붙여넣기

    datapaste 패키지 설치 -\> 엑셀에서 ctrl+c -\> RStudio의 Addins에서 Paste as tribble

<!-- -->

4.  csv 파일에서 불러오기

```{r}

#| eval: true

 #  read.csv ("D:/r/data/test.csv")       ## **/** 방향 주의
 #  read.csv ("D:\\r\\data\\test.csv")    ## **\\** 방향 주의
   
```

5.  엑셀파일 불러오기 <https://readxl.tidyverse.org/>

```{r}

#| eval: true

#   install.packages('readxl')
#   library(readxl)
#   read_excel("my_file.xls")
   
```

6.  구글시트에서 불러오기

\[참고\] <https://googlesheets4.tidyverse.org/>

```{r}

#install.packages("googlesheets4")
library(googlesheets4)
gs4_deauth()

df <- read_sheet("https://docs.google.com/spreadsheets/d/1V1nPp1tzOuutXFLb3G9Eyxi3qxeEhnOXUzL5_BcCQ0w/edit?gid=0#gid=0")

head(df)
```

7.  NA 처리하기 <https://tidyr.tidyverse.org/reference/fill.html>

```{r}
sales <- tibble::tribble(
  ~quarter, ~year, ~sales,
  "Q1",    2000,    66013,
  "Q2",      NA,    69182,
  "Q3",      NA,    53175,
  "Q4",      NA,    21001,
  "Q1",    2001,    46036,
  "Q2",      NA,    58842,
  "Q3",      NA,    44568,
  "Q4",      NA,    50197,
  "Q1",    2002,    39113,
  "Q2",      NA,    41668,
  "Q3",      NA,    30144,
  "Q4",      NA,    52897,
  "Q1",    2004,    32129,
  "Q2",      NA,    67686,
  "Q3",      NA,    31768,
  "Q4",      NA,    49094
)


# `fill()` defaults to replacing missing data from top to bottom
sales %>% fill(year, .direction = "down")
```

8.  NA를 평균, 중앙값으로 대체하기

```{r}
head(airquality)
colSums(is.na(airquality))

airquality |> 
  mutate(Ozone = ifelse(is.na(Ozone), mean(Ozone, na.rm=T), Ozone),
         Solar.R = ifelse(is.na(Ozone), median(Ozone, na.rm=T), Solar.R)) -> airquality2

colSums(is.na(airquality2))


```

## 시각화 하기

\[ggplot 갤러리\] [The R Graph Gallery – Help and inspiration for R charts (r-graph-gallery.com)](https://r-graph-gallery.com/)

\[한국 R 사용자회 – 챗GPT 데이터 시각화 (r2bit.com)\] <https://r2bit.com/bitSlide/chatgpt_viz_202406.html#/데이터-시각화>

\[참고 자료\] <https://waterfirst.quarto.pub/r_course/#/title-slide>

\[참고 자료\] <https://rstudio.github.io/cheatsheets/html/data-visualization.html>



```{r}
df <- tibble::tribble(
  ~angle,  ~`4.3`,  ~`3.8`,  ~`3.3`,  ~`2.8`,  ~`2.3`,  ~`1.8`,  ~`1.3`,
      0L,   0.999,   0.999,       1,       1,       1,       1,       1,
      5L,       1,       1,   0.999,   0.988,   0.963,   0.923,    0.88,
     10L,    0.91,   0.866,   0.821,   0.774,    0.73,   0.685,    0.64,
     15L,   0.668,   0.621,   0.577,   0.533,    0.49,   0.449,   0.407,
     20L,   0.424,   0.382,   0.339,   0.294,   0.252,   0.207,   0.162,
     25L,   0.182,   0.139,   0.096,   0.056,   0.028,   0.014,   0.011,
     30L,   0.011,    0.01,    0.01,   0.009,   0.009,    0.01,   0.009,
     35L,   0.008,   0.008,   0.008,   0.008,   0.008,   0.008,   0.008,
     40L,   0.007,   0.007,   0.007,   0.007,   0.007,   0.007,   0.007,
     45L,   0.006,   0.006,   0.005,   0.006,   0.005,   0.003,   0.002,
     50L,   0.005,   0.005,   0.004,   0.003,   0.002,   0.001,   0.001,
     55L,   0.006,   0.003,   0.002,   0.001,   0.001,   0.001,       0,
     60L,   0.005,   0.002,   0.001,   0.001,   0.001,       0,       0,
     65L,   0.004,   0.003,   0.001,   0.001,       0,       0,       0,
     70L,   0.003,   0.002,   0.002,       0,       0,       0,       0
  )
head(df)
```


#### 1. 산점도 그래프

```{r}
library(tidyverse)

df %>% pivot_longer(-1, names_to = "space", values_to = "value") %>% 
  
  ggplot(aes(x=angle, y=value, col=space))+
  geom_point()+
  geom_smooth(se=F, method = "gam")+
  theme_bw()
```

```{r}
df %>% pivot_longer(-1, names_to = "space", values_to = "value") %>% 
  
  ggplot(aes(x=angle, y=value, col=space))+
  geom_point()+
  geom_smooth(se=F, method = "gam")+
  theme_bw()+
  facet_wrap(~space, labeller = label_both)
```
#### 2. 막대 그래프
```{r}
df %>% pivot_longer(-1, names_to = "space", values_to = "value") %>%  
  mutate(space = as.numeric(space)) %>% 
  filter(angle %in% c(0, 10, 15)) %>% 
  mutate(angle = as.factor(angle)) %>% 
  ggplot(aes(x=space, y=value*100, label=value*100, fill=angle))+
  geom_col(position="dodge")+
  
  geom_text(aes(label = value*100, y=value*100+3), position = position_dodge(0.5))+
  theme_bw()+
  labs(y="normalized value(%)", x="space 이격거리")
```

```{r}
df %>% pivot_longer(-1, names_to = "space", values_to = "value") %>%  
  mutate(space = as.numeric(space)) %>% 
  filter(angle %in% c(0, 10, 15)) %>% 
  mutate(angle = as.factor(angle)) %>% 
  ggplot(aes(x=space, y=value*100, label=value*100, fill=angle))+
  geom_col(position="dodge")+
  geom_label(position= position_dodge(0.4))+
  theme_bw()+
  labs(y="normalized value(%)", x="space 이격거리")
```
```{r}
df %>% pivot_longer(-1, names_to = "space", values_to = "value") %>%  
  mutate(space = as.factor(space)) %>% 
  filter(angle >45) %>% 
  ggplot(aes(x=space, y=value*100,  fill=space))+
  geom_boxplot()+
  theme_bw()+
  labs(y="normalized value(%)", x="space 이격거리")
```
- 평균값 넣기

```{r}

p <- df %>% pivot_longer(-1, names_to = "space", values_to = "value") %>%  
  mutate(space = as.factor(space)) %>% 
  filter(angle <25) %>% 
  ggplot(aes(x=space, y=value*100,  fill=space))+
  geom_boxplot()+
  theme_bw()+
  labs(y="normalized value(%)", x="space 이격거리")

fun_mean <- function(x){
  return(data.frame(y=mean(x),label=round(mean(x,na.rm=T),1)))}

p+
  stat_summary(fun.data = fun_mean, geom="text", vjust=-0.7, position=position_dodge(0.8))+
  stat_summary(fun.y = mean, geom="point", size=1)

```


\[참고자료\]<https://ggplot2.tidyverse.org/reference/geom_boxplot.html>


#### 4. Color 팔레트

```{r}
library(RColorBrewer)
display.brewer.all()
```

사용법 :

scale_fill_brewer(palette="Set1")

scale_colour_brewer(palette="Set1")

\[Color Pick Up\](<https://r-graph-gallery.com/ggplot2-color.html>)

\[Colorspace 패키지\](<https://m.blog.naver.com/regenesis90/222234511150>)

\[Sci-Fi\](<https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html>)


#### 5. 테마 

\[theme\](<https://ggplot2.tidyverse.org/reference/ggtheme.html>)

## 표로 데이터 보여주기


### gt 패키지 이용하기


- [gt package]<https://gt.rstudio.com/articles/gt.html>

1) 간단한 테이블 만들어보기 (나라별 섬 갯수)

```{r}
library(tidyverse)
library(gt)

df <- tibble(
    name = names(islands),
    size = islands
  ) 

df |> 
  arrange(-size)|>
  slice(1:10) |> 
  gt()
```


![](https://gt.rstudio.com/reference/figures/gt_parts_of_a_table.svg){width="719"}
2) Title, subtitle 넣기

```{r}

df |> 
  arrange(-size)|>
  slice(1:10) |> 
  gt() |> 
    tab_header(
    title = "Large Landmasses of the World",
    subtitle = "The top ten largest are presented"
  )
```
3) 제목 꾸미기 (마크다운 문법 md)

```{r}
df |> 
  arrange(-size)|>
  slice(1:2) |> 
  gt() |> 
  tab_header(
    title = md("**Large Landmasses of the World**"),
    subtitle = md("The *top two* largest are presented")
  )
```
4) 바닥글에 출처 넣기(tab_source_note)
```{r}
df |> 
  arrange(-size)|>
  slice(1:10) |> 
  gt() |> 
  tab_header(
    title = md("**Large Landmasses of the World**"),
    subtitle = md("The *top two* largest are presented")
  ) |> 
    tab_source_note(
    source_note = "Source: The World Almanac and Book of Facts, 1975, page 406."
  ) |>
  tab_source_note(
    source_note = md("Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.")
  )
```
5) 주석 넣기(tab_footnote)

```{r}
df |> 
  arrange(-size)|>
  slice(1:10) |> 
  gt() |> 
  tab_header(
    title = md("**Large Landmasses of the World**"),
    subtitle = md("The *top two* largest are presented")
  ) |> 
    tab_source_note(
    source_note = "Source: The World Almanac and Book of Facts, 1975, page 406."
  ) |>
  tab_source_note(
    source_note = md("Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.")
  ) |> 
  
    tab_footnote(
    footnote = "The Americas.",
    locations = cells_body(columns = name, rows = 3:4)
  ) |> 
  
  tab_footnote(
    footnote = "The largest by area.",
    locations = cells_body(
      columns = size,
      rows = size == max(size)
    )
  ) |>
  tab_footnote(
    footnote = "The lowest by area.",
    locations = cells_body(
      columns = size,
      rows = size == min(size)
    )
  )
```
6) table 저장하기
```{r}
df |> 
  arrange(-size)|>
  slice(1:10) |> 
  gt() |> 
  tab_header(
    title = md("**Large Landmasses of the World**"),
    subtitle = md("The *top two* largest are presented")
  ) |> 
    tab_source_note(
    source_note = "Source: The World Almanac and Book of Facts, 1975, page 406."
  ) |>
  tab_source_note(
    source_note = md("Reference: McNeil, D. R. (1977) *Interactive Data Analysis*. Wiley.")
  ) |> 
  
    tab_footnote(
    footnote = "The Americas.",
    locations = cells_body(columns = name, rows = 3:4)
  ) |> 
  
  tab_footnote(
    footnote = "The largest by area.",
    locations = cells_body(
      columns = size,
      rows = size == max(size)
    )
  ) |>
  tab_footnote(
    footnote = "The lowest by area.",
    locations = cells_body(
      columns = size,
      rows = size == min(size)
    )
  ) |> 
  #  gtsave(filename = "tab_1.html") |> 
  gtsave("tab_1.png", expand = 10)
```


